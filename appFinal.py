# -*- coding: utf-8 -*-
"""Proyecto Final_Pipes_Despliegue.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oycsQsZH_6r8wGM_poWsPfCJz-s0vDzd
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def aplicar_reglas_calidad(df):
    """
    Aplica todas las reglas de calidad al DataFrame de entrada.

    Parámetros:
    df -- DataFrame de pandas a procesar

    Retorna:
    DataFrame procesado con las reglas de calidad aplicadas
    """

    # Helper function to safely process a column if it exists
    def safe_process_column(df, col_name, processing_logic):
        if col_name in df.columns:
            # Apply the processing logic to the column
            df[col_name] = processing_logic(df[col_name])
        # else:
            # Optionally, add a warning or logging if a column is missing
            # print(f"Warning: Column '{col_name}' not found in DataFrame.")
        return df # Return df even if column not found


    # ----------------------------
    # 11. Variables binarias
    # ----------------------------
    vars_binarias = [
        'desplazami', 'dolrretroo','artralgia', 'erupcionr',
        'dolor_abdo', 'vomito', 'diarrea', 'caida_plaq',
        'extravasac', 'hemorr_hem', 'choque', 'daño_organ'
    ]

    for var in vars_binarias:
        df = safe_process_column(df, var,
            lambda col: pd.Categorical(col.astype(str).str.strip().str.replace(r'[^12]', '', regex=True).replace({'': np.nan}), categories=['1', '2'])
        )

    # # ----------------------------
    # # 12. sem_ges_
    # # ----------------------------
    # SEMANA_MIN, SEMANA_MAX = 1, 42
    # # This column was dropped earlier, but the function should handle its absence gracefully.
    # df = safe_process_column(df, 'sem_ges_',
    #     lambda col: pd.to_numeric(col.astype(str).str.strip().str.extract(r'^(\d+)')[0], errors='coerce').where(lambda x: x.between(SEMANA_MIN, SEMANA_MAX)).astype('category')
    # )

    # # ----------------------------
    # # 13. fuente_
    # # ----------------------------
    # codigos_fuente = {1, 2, 3, 4, 5}
    # # This column was dropped earlier, but the function should handle its absence gracefully.
    # df = safe_process_column(df, 'fuente_',
    #     lambda col: col.astype(str).str.strip().str.replace(r'[^1-5]', '', regex=True).apply(lambda x: x if (x.isdigit() and int(x) in codigos_fuente) else np.nan).astype('category')
    # )

    # # ----------------------------
    # # 14. Códigos geográficos
    # # ----------------------------
    # vars_geograficas = ['cod_pais_r', 'cod_dpto_r', 'cod_mun_r']
    # # Note: 'cod_pais_r' was dropped earlier, but the loop handles it.
    # for var in vars_geograficas:
    #     df = safe_process_column(df, var,
    #         lambda col: pd.Categorical(pd.to_numeric(col.astype(str).str.strip().str.extract(r'^(\d+)$')[0], errors='coerce').where(lambda x: x >= 0).astype('Int64'))
    #     )

    # # ----------------------------
    # # 15. ini_sin_
    # # ----------------------------
    # meses_validos = set(range(1, 13))
    # df = safe_process_column(df, 'ini_sin_',
    #     lambda col: col.astype(str).str.strip().str.extract(r'^(\d+)')[0].apply(lambda x: x if (x.isdigit() and int(x) in meses_validos) else np.nan).astype('category')
    # )

    # # ----------------------------
    # # 16. tip_cas_
    # # ----------------------------
    # codigos_tipcas = {1, 2, 3, 4, 5}
    # df = safe_process_column(df, 'tip_cas_',
    #     lambda col: col.astype(str).str.strip().str.replace(r'[^1-5]', '', regex=True).apply(lambda x: x if (x.isdigit() and int(x) in codigos_tipcas) else np.nan).astype('category')
    # )

    # # ----------------------------
    # # 17. con_fin_
    # # ----------------------------
    # codigos_confina = {1, 2, 3}
    # df = safe_process_column(df, 'con_fin_',
    #     lambda col: col.astype(str).str.strip().str.replace(r'[^1-3]', '', regex=True).apply(lambda x: x if (x.isdigit() and int(x) in codigos_confina) else np.nan).astype('category')
    # )

    # # ----------------------------
    # # 18. ajuste_
    # # ----------------------------
    # codigos_ajuste = set(range(8))  # 0-7
    # df = safe_process_column(df, 'ajuste_',
    #     lambda col: col.astype(str).str.strip().str.replace(r'[^0-7]', '', regex=True).apply(lambda x: x if (x.isdigit() and int(x) in codigos_ajuste) else np.nan).astype('category')
    # )

    # # ----------------------------
    # # 19. version
    # # ----------------------------
    # df = safe_process_column(df, 'version',
    #     lambda col: col.apply(lambda x: np.nan if (pd.isna(x) or not str(x).isdigit() or int(x) < 2000) else str(x))
    # )

    # # ----------------------------
    # # 20. clasfinal
    # # ----------------------------
    # clasfinal_valido = [
    #     'DENGUE CON SIGNOS DE ALARMA',
    #     'DENGUE SIN SIGNOS DE ALARMA',
    #     'DENGUE GRAVE'
    # ]
    # df = safe_process_column(df, 'clasfinal',
    #     lambda col: col.str.upper().str.strip().where(col.str.upper().str.strip().isin(clasfinal_valido)).astype('category')
    # )

    # # ----------------------------
    # # 21. conducta
    # # ----------------------------
    # conducta_valido = [
    #     'HOSPITALIZACION PISO', 'AMBULATORIA', 'OBSERVACION',
    #     'UNIDAD DE CUIDADOS INTENSIVOS', 'REMISION PARA HOSPITALIZACION', 'NO APLICA'
    # ]
    # df = safe_process_column(df, 'conducta',
    #     lambda col: col.str.upper().str.strip().where(col.str.upper().str.strip().isin(conducta_valido)).astype('category')
    # )

    # # ----------------------------
    # # 22. nom_eve
    # # ----------------------------
    # nom_eve_valido = [
    #     'DENGUE', 'DENGUE GRAVE', 'MORTALIDAD POR DENGUE'
    # ]
    # df = safe_process_column(df, 'nom_eve',
    #     lambda col: col.str.upper().str.strip().where(col.str.upper().str.strip().isin(nom_eve_valido)).astype('category')
    # )

    return df

#Cargamos el pipeline con el modelo
import pickle
filename = 'pipeline_modelo (1).pkl'
pipeline = pickle.load(open(filename, 'rb'))
#pipeline

# #Cargamos datos futuros
# df = pd.read_excel('/content/datosfuturos_limpio.xlsx')
# df

import streamlit as st

st.title('Predicción de Clasifiación final de dengue')

desplazami = st.selectbox('desplazami', ['1', '2'])
dolrretroo = st.selectbox('dolrretroo', ['1', '2'])
artralgia = st.selectbox('artralgia', ['1', '2'])
erupcionr = st.selectbox('erupcionr', ['1', '2'])
dolor_abdo = st.selectbox('dolor_abdo', ['1', '2'])
vomito = st.selectbox('vomito', ['1', '2'])
diarrea = st.selectbox('diarrea', ['1', '2'])
caida_plaq = st.selectbox('caida_plaq', ['1', '2'])
extravasac = st.selectbox('extravasac', ['1', '2'])
hemorr_hem = st.selectbox('hemorr_hem', ['1', '2'])
choque = st.selectbox('choque', ['1', '2'])
daño_organ = st.selectbox('daño_organ', ['1', '2'])


#Dataframe
datos = [[desplazami, dolrretroo, artralgia, erupcionr, dolor_abdo, vomito, diarrea, caida_plaq, extravasac, hemorr_hem, choque, daño_organ]]
data = pd.DataFrame(datos, columns=['desplazami', 'dolrretroo','artralgia','erupcionr','dolor_abdo', 'vomito', 'diarrea', 'caida_plaq', 'extravasac', 'hemorr_hem', 'choque', 'daño_organ'])

#Hacemos la predicción con el modelo SVM
Y_SVM = pipeline.predict(data)
print(Y_SVM)

df['Prediccion']=Y_SVM
df
